services:
  # MongoDB Primary
  ualflix_db_primary:
    image: mongo:6.0
    container_name: ualflix_db_primary
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=ualflix
    volumes:
      - mongo_primary_data:/data/db
      - ./mongodb-setup:/docker-entrypoint-initdb.d/
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB Secondary
  ualflix_db_secondary:
    image: mongo:6.0
    container_name: ualflix_db_secondary
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo_secondary_data:/data/db
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    depends_on:
      - ualflix_db_primary
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB Arbiter
  ualflix_db_arbiter:
    image: mongo:6.0
    container_name: ualflix_db_arbiter
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - mongo_arbiter_data:/data/db
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    depends_on:
      - ualflix_db_primary
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Inicializador do Replica Set
  mongodb_replica_init:
    image: mongo:6.0
    container_name: mongodb_replica_init
    networks:
      - ualflix_net
    depends_on:
      ualflix_db_primary:
        condition: service_healthy
      ualflix_db_secondary:
        condition: service_healthy
      ualflix_db_arbiter:
        condition: service_healthy
    volumes:
      - ./mongodb-setup:/scripts
    command: >
      bash -c "
        echo 'Aguardando MongoDB instances...';
        sleep 20;
        echo 'Inicializando Replica Set...';
        mongosh --host ualflix_db_primary:27017 --eval \"
        var config = {
          _id: 'ualflix-replica-set',
          members: [
            { _id: 0, host: 'ualflix_db_primary:27017', priority: 2 },
            { _id: 1, host: 'ualflix_db_secondary:27017', priority: 1 },
            { _id: 2, host: 'ualflix_db_arbiter:27017', arbiterOnly: true }
          ]
        };
        try {
          rs.initiate(config);
          print('Replica set inicializado');
        } catch(e) {
          print('Replica set ja existe:', e.message);
        }
        
        sleep(15000);
        
        db = db.getSiblingDB('ualflix');
        db.createCollection('users');
        db.createCollection('videos');
        db.createCollection('video_views');
        
        db.users.createIndex({ 'username': 1 }, { unique: true });
        db.videos.createIndex({ 'user_id': 1 });
        
        if (!db.users.findOne({username: 'admin'})) {
          db.users.insertOne({
            username: 'admin',
            email: 'admin@ualflix.com',
            password: 'pbkdf2:sha256:260000\\$salt\\$hash',
            is_admin: true,
            created_at: new Date()
          });
          print('Admin user criado');
        }
        
        print('Base de dados configurada');
        \";
        echo 'Setup MongoDB concluido!';
      "

  # RabbitMQ
  queue_service:
    image: rabbitmq:3-management
    container_name: queue_service
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ualflix
      - RABBITMQ_DEFAULT_PASS=ualflix_password
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streaming Service
  streaming_service:
    build: ./streaming_service
    container_name: streaming_service
    restart: unless-stopped
    ports:
      - "8003:8001"
    volumes:
      - ./video_data:/videos:ro
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Authentication Service
  authentication_service:
    build: ./authentication_service
    container_name: authentication_service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
      - SECRET_KEY=ualflix-secret-key
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Catalog Service
  catalog_service:
    build: ./catalog_service
    container_name: catalog_service
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
      - AUTH_SERVICE_URL=http://authentication_service:8000
    volumes:
      - ./video_data:/videos
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
      queue_service:
        condition: service_healthy
      authentication_service:
        condition: service_healthy
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Admin Service
  admin_service:
    build: ./admin_service
    container_name: admin_service
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
      authentication_service:
        condition: service_healthy
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Video Processor
  video_processor:
    build: ./video_processor
    container_name: video_processor
    restart: unless-stopped
    ports:
      - "8004:8000"
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
    volumes:
      - ./video_data:/videos
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
      queue_service:
        condition: service_healthy
    networks:
      - ualflix_net

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - authentication_service
      - catalog_service
      - admin_service
      - streaming_service
    networks:
      - ualflix_net

  # NGINX
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      frontend:
        condition: service_started
      authentication_service:
        condition: service_healthy
      catalog_service:
        condition: service_healthy
      admin_service:
        condition: service_healthy
      streaming_service:
        condition: service_healthy
    networks:
      - ualflix_net

networks:
  ualflix_net:
    driver: bridge

volumes:
  mongo_primary_data:
  mongo_secondary_data:
  mongo_arbiter_data: