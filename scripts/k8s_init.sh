#!/bin/bash
# Executar UALFlix no Kubernetes com 3 n√≥s - Setup Completo

echo "üé¨ UALFlix - Setup Kubernetes com 3 N√≥s"
echo "======================================"

# 1. Verificar pr√©-requisitos
echo "1Ô∏è‚É£ Verificando pr√©-requisitos..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale: https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl n√£o encontrado. Instale: https://kubernetes.io/docs/tasks/tools/"
    exit 1
fi

if ! command -v minikube &> /dev/null; then
    echo "‚ùå Minikube n√£o encontrado. Instale: https://minikube.sigs.k8s.io/docs/start/"
    exit 1
fi

echo "‚úÖ Todos os pr√©-requisitos instalados!"

# 2. Iniciar cluster com 3 n√≥s
echo "2Ô∏è‚É£ Iniciando cluster Minikube com 3 n√≥s..."

# Parar qualquer inst√¢ncia existente
minikube delete 2>/dev/null || true

# Iniciar novo cluster
minikube start \
    --driver=docker \
    --nodes=3 

echo "‚úÖ Cluster iniciado com 3 n√≥s!"

# 3. Verificar n√≥s
echo "3Ô∏è‚É£ Verificando n√≥s do cluster..."
kubectl get nodes -o wide

# 4. Habilitar addons
echo "4Ô∏è‚É£ Habilitando addons necess√°rios..."
minikube addons enable ingress
minikube addons enable dashboard
minikube addons enable metrics-server
minikube addons enable default-storageclass
minikube addons enable storage-provisioner

# 5. Configurar Docker environment
echo "5Ô∏è‚É£ Configurando Docker environment..."
eval $(minikube docker-env)

# 6. Build das imagens Docker
echo "6Ô∏è‚É£ Construindo imagens Docker..."
services=("frontend" "authentication_service" "catalog_service" "streaming_service" "admin_service" "video_processor")

for service in "${services[@]}"; do
    echo "Building $service..."
    docker build -t ${service}:latest ./${service}/
done

echo "‚úÖ Todas as imagens constru√≠das!"

# 7. Deploy da aplica√ß√£o
echo "7Ô∏è‚É£ Fazendo deploy da aplica√ß√£o UALFlix..."

# Namespace
kubectl apply -f k8s/namespace.yaml

# Secrets e ConfigMaps
kubectl apply -f k8s/secrets.yaml

# MongoDB (Base de dados com replica√ß√£o)
echo "üìä Deploying MongoDB Replica Set..."
kubectl apply -f k8s/database/
kubectl wait --for=condition=ready pod -l app=mongodb -n ualflix --timeout=300s || true
sleep 10

# RabbitMQ
echo "üê∞ Deploying RabbitMQ..."
kubectl apply -f k8s/messaging/
kubectl wait --for=condition=ready pod -l app=rabbitmq -n ualflix --timeout=300s || true
sleep 5

# Servi√ßos da aplica√ß√£o
echo "üîß Deploying application services..."
kubectl apply -f k8s/services/auth/
kubectl apply -f k8s/services/catalog/
kubectl apply -f k8s/services/streaming/
kubectl apply -f k8s/services/admin/
kubectl apply -f k8s/services/processor/

sleep 20
kubectl wait --for=condition=available deployment --all -n ualflix --timeout=300s || true

# Frontend
echo "‚öõÔ∏è Deploying React Frontend..."
kubectl apply -f k8s/frontend/
kubectl wait --for=condition=available deployment/frontend -n ualflix --timeout=300s || true

# NGINX Gateway (Load Balancer Principal)
echo "üåê Deploying NGINX Gateway..."
kubectl apply -f k8s/ingress/nginx-configmap.yaml
kubectl apply -f k8s/ingress/nginx-deployment.yaml
kubectl apply -f k8s/ingress/nginx-service.yaml
kubectl wait --for=condition=available deployment/nginx-gateway -n ualflix --timeout=300s || true

# Monitoring
echo "üìä Deploying monitoring..."
kubectl apply -f k8s/monitoring/ || true

echo "‚úÖ Deploy conclu√≠do!"

# 8. Verificar status
echo "8Ô∏è‚É£ Verificando status do sistema..."

echo ""
echo "üìã N√≥s do cluster:"
kubectl get nodes

echo ""
echo "üì¶ Pods:"
kubectl get pods -n ualflix -o wide

echo ""
echo "üîó Services:"
kubectl get services -n ualflix

# 9. Obter URLs de acesso
echo "9Ô∏è‚É£ Obtendo URLs de acesso..."

echo ""
echo "üåê URLs de Acesso:"
echo "Aplica√ß√£o Principal (NGINX Gateway):"
NGINX_URL=$(minikube service nginx-gateway --namespace ualflix --url)
echo "  $NGINX_URL"

echo ""
echo "Prometheus:"
PROMETHEUS_URL=$(minikube service prometheus-service --namespace ualflix --url 2>/dev/null || echo "  N√£o dispon√≠vel")
echo "  $PROMETHEUS_URL"

echo ""
echo "Grafana:"
GRAFANA_URL=$(minikube service grafana-service --namespace ualflix --url 2>/dev/null || echo "  N√£o dispon√≠vel")
echo "  $GRAFANA_URL"

# 10. Testes b√°sicos
echo "üîü Executando testes b√°sicos..."

sleep 10

# Testar NGINX Gateway
if kubectl exec -n ualflix deployment/frontend -- curl -f http://nginx-gateway:8080/health --max-time 10 >/dev/null 2>&1; then
    echo "‚úÖ NGINX Gateway respondendo"
else
    echo "‚ö†Ô∏è NGINX Gateway n√£o respondendo"
fi

# Testar Auth Service
if kubectl exec -n ualflix deployment/frontend -- curl -f http://auth-service:8000/health --max-time 10 >/dev/null 2>&1; then
    echo "‚úÖ Auth Service respondendo"
else
    echo "‚ö†Ô∏è Auth Service n√£o respondendo"
fi

# 11. Verificar distribui√ß√£o pelos n√≥s
echo "1Ô∏è‚É£1Ô∏è‚É£ Verificando distribui√ß√£o dos pods pelos n√≥s..."
echo ""
echo "üìä Distribui√ß√£o por N√≥:"
kubectl get pods -n ualflix -o wide | awk '{print $1, $7}' | column -t

# 12. Funcionalidades implementadas
echo ""
echo "üéâ UALFlix configurado com SUCESSO!"
echo ""
echo "‚úÖ Funcionalidades Implementadas:"
echo "FUNCIONALIDADE 1: Tecnologias de Sistemas Distribu√≠dos"
echo "  ‚Üí Microservi√ßos comunicando via APIs REST"
echo "  ‚Üí Processamento ass√≠ncrono com RabbitMQ"
echo ""
echo "FUNCIONALIDADE 2: Cluster de Computadores (3 n√≥s)"
echo "  ‚Üí Kubernetes com 3 n√≥s"
echo "  ‚Üí Coordena√ß√£o de recursos compartilhados"
echo "  ‚Üí Adi√ß√£o/remo√ß√£o de n√≥s sem interrup√ß√£o"
echo ""
echo "FUNCIONALIDADE 3: Virtualiza√ß√£o"
echo "  ‚Üí Containers Docker para isolamento"
echo "  ‚Üí Pods Kubernetes para orquestra√ß√£o"
echo ""
echo "FUNCIONALIDADE 4: Implementa√ß√£o na Cloud"
echo "  ‚Üí Deploy em ambiente Kubernetes"
echo "  ‚Üí Elasticidade autom√°tica (HPA)"
echo ""
echo "FUNCIONALIDADE 5: Replica√ß√£o de Dados"
echo "  ‚Üí MongoDB Replica Set com 3 inst√¢ncias"
echo "  ‚Üí Estrat√©gias s√≠ncrona e ass√≠ncrona"
echo ""
echo "FUNCIONALIDADE 6: Replica√ß√£o de Servi√ßos"
echo "  ‚Üí M√∫ltiplas r√©plicas com Load Balancing"
echo "  ‚Üí NGINX como roteador principal"
echo "  ‚Üí Detec√ß√£o de falhas e recupera√ß√£o autom√°tica"
echo ""
echo "FUNCIONALIDADE 7: Avalia√ß√£o de Desempenho"
echo "  ‚Üí M√©tricas com Prometheus"
echo "  ‚Üí Dashboards com Grafana"
echo "  ‚Üí Monitoramento de lat√™ncia e throughput"

echo ""
echo "üåê Aplica√ß√£o dispon√≠vel em: $NGINX_URL"
echo "üìä Para abrir no browser: minikube service nginx-gateway --namespace ualflix"
echo ""
echo "üîß Comandos √∫teis:"
echo "  kubectl get pods -n ualflix -o wide"
echo "  kubectl logs -f -n ualflix deployment/nginx-gateway"
echo "  kubectl scale deployment catalog-service --replicas=5 -n ualflix"
echo "  minikube dashboard"