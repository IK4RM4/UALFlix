#-----------------------------------------------------------------------
# HAProxy configuration for UALFlix - CORRIGIDO E COMPLETO
# FUNCIONALIDADE 6: Replicação de Serviços (Load Balancing)
#-----------------------------------------------------------------------

global
    daemon
    log stdout local0 info
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    # Configurações de performance
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    maxconn 4096

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    
    # Health check defaults
    option httpchk GET /health
    http-check expect status 200
    
    # Logging melhorado para métricas
    capture request header Host len 32
    capture request header User-Agent len 64
    capture response header Content-Type len 32

#-----------------------------------------------------------------------
# FUNCIONALIDADE 7: Stats interface para métricas automáticas
#-----------------------------------------------------------------------
stats enable
stats uri /stats
stats realm HAProxy\ Statistics
stats auth admin:admin
stats refresh 30s
stats show-legends
stats show-node

#-----------------------------------------------------------------------
# Frontend definitions
#-----------------------------------------------------------------------

# Main frontend for load balancing services
frontend ualflix_frontend
    bind *:8090
    
    # ACLs para roteamento baseado em path
    acl is_auth_service path_beg /api/auth
    acl is_catalog_service path_beg /api/videos /api/upload /api/my-videos
    acl is_streaming_service path_beg /stream /videos
    acl is_admin_service path_beg /api/admin
    acl is_stats path_beg /stats
    
    # Headers para debug
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Load-Balancer HAProxy
    
    # Roteamento para backends
    use_backend auth_backend if is_auth_service
    use_backend catalog_backend if is_catalog_service
    use_backend streaming_backend if is_streaming_service
    use_backend admin_backend if is_admin_service
    
    # Stats interno
    use_backend stats_backend if is_stats
    
    # Default backend
    default_backend catalog_backend

# Frontend para métricas Prometheus (FUNCIONALIDADE 7)
frontend prometheus_metrics
    bind *:8091
    mode http
    
    # Endpoint para métricas de HAProxy
    stats enable
    stats uri /metrics
    stats format prometheus
    stats refresh 10s
    
    # Custom health endpoint
    monitor-uri /health
    monitor fail if { nbsrv(auth_backend) lt 1 }
    monitor fail if { nbsrv(catalog_backend) lt 1 }
    monitor fail if { nbsrv(streaming_backend) lt 1 }

#-----------------------------------------------------------------------
# Backend definitions - FUNCIONALIDADE 6: Múltiplas réplicas CORRIGIDO
#-----------------------------------------------------------------------

# Stats backend interno
backend stats_backend
    stats enable
    stats uri /stats
    stats refresh 30s
    stats realm HAProxy\ Admin
    stats auth admin:admin
    stats admin if TRUE

# Authentication Service Backend
# NOTA: Em Docker Compose, usamos service scaling em vez de múltiplos servers
backend auth_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Server principal - Docker Compose irá escalar automaticamente
    server auth1 authentication_service:8000 check inter 30s rise 2 fall 3 maxconn 100
    
    # Fallback para nginx se auth falhar completamente
    server auth_fallback nginx:8080 check inter 60s rise 1 fall 5 backup
    
    # Métricas para Prometheus
    stats enable

# Catalog Service Backend  
backend catalog_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Configurações específicas para upload
    timeout server 300s  # 5 minutos para uploads grandes
    timeout client 300s  # Cliente também precisa de timeout maior
    
    # Server principal - Docker Compose scaling
    server catalog1 catalog_service:8000 check inter 30s rise 2 fall 3 maxconn 150
    
    # Fallback
    server catalog_fallback nginx:8080 check inter 60s rise 1 fall 5 backup
    
    stats enable

# Streaming Service Backend
backend streaming_backend
    balance leastconn  # Melhor para streaming
    option httpchk GET /health
    http-check expect status 200
    
    # Configurações específicas para streaming
    timeout server 600s  # 10 minutos para streams longos
    timeout client 600s  # Cliente streaming
    option http-keep-alive
    option prefer-last-server  # Manter conexão com mesmo server se possível
    
    # Server principal
    server stream1 streaming_service:8001 check inter 30s rise 2 fall 3 maxconn 200
    
    # Fallback
    server stream_fallback nginx:8080 check inter 60s rise 1 fall 5 backup
    
    stats enable

# Admin Service Backend
backend admin_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Server principal
    server admin1 admin_service:8002 check inter 30s rise 2 fall 3 maxconn 50
    
    # Sem fallback para admin - deve estar sempre disponível
    
    stats enable

#-----------------------------------------------------------------------
# FUNCIONALIDADE 2: Backends de infraestrutura para cluster
#-----------------------------------------------------------------------

# Backend para Prometheus (se necessário fazer proxy)
backend prometheus_backend
    option httpchk GET /-/healthy
    server prometheus1 prometheus:9090 check inter 30s rise 2 fall 3

# Backend para Grafana (se necessário fazer proxy)  
backend grafana_backend
    option httpchk GET /api/health
    server grafana1 grafana:4000 check inter 30s rise 2 fall 3

# Backend para Consul (service discovery)
backend consul_backend
    option httpchk GET /v1/status/leader
    server consul1 consul:8500 check inter 30s rise 2 fall 3

#-----------------------------------------------------------------------
# FUNCIONALIDADE 7: Logging customizado para análise de performance
#-----------------------------------------------------------------------

# Log format detalhado para análise de performance
log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs \"%HM %HU %HV\""

# Logs específicos por backend para análise
log 127.0.0.1:514 local1 info

#-----------------------------------------------------------------------
# Error pages customization
#-----------------------------------------------------------------------

# Custom error pages (simplificadas - sem dependência de ficheiros externos)
errorfile 400 /dev/null
errorfile 403 /dev/null  
errorfile 408 /dev/null
errorfile 500 /dev/null
errorfile 502 /dev/null
errorfile 503 /dev/null
errorfile 504 /dev/null

#-----------------------------------------------------------------------
# FUNCIONALIDADE 5: Configurações avançadas para replicação
#-----------------------------------------------------------------------

# Configurações globais para melhor performance com réplicas
global
    # Já definido acima, mas garantindo configurações de replicação
    spread-checks 4
    
# Health check global mais robusto
defaults
    # Configurações específicas para detectar falhas rapidamente
    option log-health-checks
    option log-separate-errors
    
    # Timeouts otimizados para replicação
    timeout http-request 10s
    timeout queue 30s
    timeout check 5s

#-----------------------------------------------------------------------
# Listeners adicionais para diferentes tipos de tráfego
#-----------------------------------------------------------------------

# Listener específico para uploads grandes (FUNCIONALIDADE 6)
listen upload_listener
    bind *:8092
    mode http
    
    # Timeouts muito grandes para uploads
    timeout client 30m
    timeout server 30m
    timeout http-request 30m
    
    # Apenas para catalog service (uploads)
    server catalog_upload catalog_service:8000 check

# Listener específico para streaming (FUNCIONALIDADE 6)
listen streaming_listener
    bind *:8093
    mode http
    
    # Otimizações para streaming
    option http-keep-alive
    option prefer-last-server
    timeout client 1h
    timeout server 1h
    
    # Apenas para streaming service
    server stream_dedicated streaming_service:8001 check

#-----------------------------------------------------------------------
# ACLs avançadas para roteamento inteligente
#-----------------------------------------------------------------------

# ACLs baseadas em tamanho de request (para uploads)
acl is_large_upload hdr_val(content-length) gt 10485760  # > 10MB

# ACLs baseadas em User-Agent (para diferentes clientes)
acl is_mobile_client hdr_sub(user-agent) -i mobile
acl is_streaming_client hdr_sub(user-agent) -i vlc
acl is_browser_client hdr_sub(user-agent) -i mozilla

# Usar listeners específicos baseados em tipo de request
frontend ualflix_frontend
    # Já definido acima, adicionando regras inteligentes:
    
    # Uploads grandes vão para listener dedicado
    redirect location http://localhost:8092%[capture.req.uri] if is_large_upload is_catalog_service
    
    # Streaming vai para listener dedicado  
    redirect location http://localhost:8093%[capture.req.uri] if is_streaming_client is_streaming_service

#-----------------------------------------------------------------------
# FUNCIONALIDADE 7: Métricas customizadas adicionais
#-----------------------------------------------------------------------

# Contadores customizados para métricas específicas
frontend ualflix_frontend
    # Adicionar headers para tracking
    http-request set-header X-Request-ID %[uuid()]
    http-request set-header X-Start-Time %T
    
    # Capturar métricas específicas
    capture request header X-Session-Token len 64
    capture response header X-Response-Time len 16

# Stats adicionais para cada backend
backend auth_backend
    stats enable
    stats uri /auth/stats
    stats realm Authentication\ Stats
    stats auth admin:admin
    stats show-legends
    
backend catalog_backend  
    stats enable
    stats uri /catalog/stats
    stats realm Catalog\ Stats
    stats auth admin:admin
    stats show-legends
    
backend streaming_backend
    stats enable  
    stats uri /streaming/stats
    stats realm Streaming\ Stats
    stats auth admin:admin
    stats show-legends
    
backend admin_backend
    stats enable
    stats uri /admin/stats  
    stats realm Admin\ Stats
    stats auth admin:admin
    stats show-legends