
services:
  # ================================================================
  # MONGODB REPLICA SET - Mantém nomes fixos (necessário para RS)
  # ================================================================
  
  ualflix_db_primary:
    image: mongo:6.0
    container_name: ualflix_db_primary
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=ualflix
    volumes:
      - mongo_primary_data:/data/db
      - ./mongodb-setup:/docker-entrypoint-initdb.d/
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ualflix_db_secondary:
    image: mongo:6.0
    container_name: ualflix_db_secondary
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo_secondary_data:/data/db
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    depends_on:
      - ualflix_db_primary
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ualflix_db_arbiter:
    image: mongo:6.0
    container_name: ualflix_db_arbiter
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - mongo_arbiter_data:/data/db
    command: mongod --replSet ualflix-replica-set --bind_ip_all --noauth
    networks:
      - ualflix_net
    depends_on:
      - ualflix_db_primary
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Inicializador do Replica Set
  mongodb_replica_init:
    image: mongo:6.0
    container_name: mongodb_replica_init
    networks:
      - ualflix_net
    depends_on:
      ualflix_db_primary:
        condition: service_healthy
      ualflix_db_secondary:
        condition: service_healthy
      ualflix_db_arbiter:
        condition: service_healthy
    volumes:
      - ./mongodb-setup:/scripts
    command: >
      bash -c "
        echo 'Aguardando MongoDB instances...';
        sleep 20;
        echo 'Inicializando Replica Set...';
        mongosh --host ualflix_db_primary:27017 --eval \"
        var config = {
          _id: 'ualflix-replica-set',
          members: [
            { _id: 0, host: 'ualflix_db_primary:27017', priority: 2 },
            { _id: 1, host: 'ualflix_db_secondary:27017', priority: 1 },
            { _id: 2, host: 'ualflix_db_arbiter:27017', arbiterOnly: true }
          ]
        };
        try {
          rs.initiate(config);
          print('Replica set inicializado');
        } catch(e) {
          print('Replica set ja existe:', e.message);
        }
        
        sleep(15000);
        
        // Inicializar base de dados com admin correto
        db = db.getSiblingDB('ualflix');
        
        // Criar coleções
        db.createCollection('users');
        db.createCollection('videos');
        db.createCollection('video_views');
        db.createCollection('replication_test');
        
        // Criar índices
        try {
          db.users.createIndex({ 'username': 1 }, { unique: true });
          db.users.createIndex({ 'email': 1 });
          db.videos.createIndex({ 'user_id': 1 });
          db.videos.createIndex({ 'status': 1 });
          db.video_views.createIndex({ 'video_id': 1 });
          db.replication_test.createIndex({ 'test_id': 1 });
          print('Índices criados');
        } catch(e) {
          print('Índices já existem');
        }
        
        // Criar usuário admin SIMPLES (sem hash complexo)
        var existingAdmin = db.users.findOne({username: 'admin'});
        if (!existingAdmin) {
          var adminUser = {
            username: 'admin',
            email: 'admin@ualflix.com',
            password: 'admin_temp_will_be_hashed_by_app',
            is_admin: true,
            created_at: new Date(),
            updated_at: new Date(),
            temp_password: true
          };
          
          db.users.insertOne(adminUser);
          print('✅ Admin criado - Username: admin, Password: admin');
        } else {
          print('Admin já existe');
          // Garantir que é admin
          db.users.updateOne(
            {username: 'admin'}, 
            {\$set: {is_admin: true, updated_at: new Date()}}
          );
        }
        
        // Verificar
        var adminCheck = db.users.findOne({username: 'admin'});
        if (adminCheck && adminCheck.is_admin) {
          print('✅ Admin verificado com sucesso');
        } else {
          print('❌ Erro na verificação do admin');
        }
        
        print('Base de dados configurada');
        \";
        echo 'Setup MongoDB concluido!';
      "

  # ================================================================
  # RABBITMQ - Mantém nome fixo (messaging queue)
  # ================================================================
  
  queue_service:
    image: rabbitmq:3-management
    container_name: queue_service
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=ualflix
      - RABBITMQ_DEFAULT_PASS=ualflix_password
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================================================
  # MICROSERVICES - CONFIGURADOS PARA MÚLTIPLAS RÉPLICAS
  # ================================================================

  # Authentication Service - 2 Réplicas
  authentication_service:
    build: ./authentication_service
    restart: unless-stopped
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
      - SECRET_KEY=ualflix-secret-key
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Catalog Service - 2 Réplicas  
  catalog_service:
    build: ./catalog_service
    restart: unless-stopped
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
      - AUTH_SERVICE_URL=http://authentication_service:8000
    volumes:
      - ./video_data:/videos
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
      queue_service:
        condition: service_healthy
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Streaming Service - 2 Réplicas
  streaming_service:
    build: ./streaming_service
    restart: unless-stopped
    volumes:
      - ./video_data:/videos:ro
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Admin Service - 2 Réplicas
  admin_service:
    build: ./admin_service
    restart: unless-stopped
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - MONGODB_PRIMARY_HOST=ualflix_db_primary
      - MONGODB_SECONDARY_HOST=ualflix_db_secondary
      - MONGODB_REPLICA_SET=ualflix-replica-set
      - MONGODB_DATABASE=ualflix
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Video Processor - 2 Réplicas
  video_processor:
    build: ./video_processor
    restart: unless-stopped
    environment:
      - MONGODB_CONNECTION_STRING=mongodb://ualflix_db_primary:27017,ualflix_db_secondary:27017,ualflix_db_arbiter:27017/ualflix?replicaSet=ualflix-replica-set
      - QUEUE_HOST=queue_service
      - QUEUE_USER=ualflix
      - QUEUE_PASSWORD=ualflix_password
    volumes:
      - ./video_data:/videos
    depends_on:
      mongodb_replica_init:
        condition: service_completed_successfully
      queue_service:
        condition: service_healthy
    networks:
      - ualflix_net
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # ================================================================
  # FRONTEND E LOAD BALANCER
  # ================================================================

  # Frontend React - 1 Instância
  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    networks:
      - ualflix_net
    depends_on:
      - authentication_service
      - catalog_service
      - admin_service
      - streaming_service

  # NGINX Load Balancer - CONFIGURADO PARA BALANCEAR RÉPLICAS
  nginx:
    image: nginx:latest
    container_name: nginx_loadbalancer
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8000:8000"   # Auth service
      - "8001:8001"   # Catalog service  
      - "8002:8002"   # Admin service
      - "8003:8003"   # Streaming service
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - authentication_service
      - catalog_service
      - admin_service
      - streaming_service
    networks:
      - ualflix_net
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================================================
  # MONITORING E MÉTRICAS
  # ================================================================

  # Prometheus - Coleta métricas de todas as réplicas
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules:/etc/prometheus/alert.rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ualflix_net
    depends_on:
      - admin_service
      - authentication_service
      - catalog_service

  # Grafana - Dashboard com métricas de réplicas
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ualflix_net
    depends_on:
      - prometheus

# ================================================================
# NETWORKS E VOLUMES
# ================================================================

networks:
  ualflix_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo_primary_data:
  mongo_secondary_data:
  mongo_arbiter_data:
  prometheus_data:
  grafana_data:

# ================================================================
# CONFIGURAÇÃO DE ESCALA PADRÃO
# ================================================================

# Para usar este docker-compose com réplicas automáticas:
# docker-compose down
# Para usar este docker-compose com réplicas automáticas:
# docker-compose up -d
# 
# Para verificar réplicas:
# docker-compose ps
#
# Para escalar manualmente um serviço específico:
# docker-compose up -d --scale authentication_service=3
#
# Para ver distribuição de carga:
# curl http://localhost:8000/health  (várias vezes)
#
# Para simular falha:
# docker stop $(docker ps -q --filter "name=authentication_service" | head -1)